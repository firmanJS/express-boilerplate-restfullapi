# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
#         node-version: [10.x, 12.x, 14.x, 15.x]
        # only node version 14.x 
        node-version: [14.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }} && install dependencies
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
        # skip because using docker
#     - run: npm install
  
  run-docker-compose:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }} && install dependencies
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Create env file
        run: |
          touch .env
          echo APP_PORT=${{ secrets.APP_PORT }} >> .env
          echo MONGO_INITDB_DATABASE=${{ secrets.MONGO_INITDB_DATABASE }} >> .env
          echo MONGO_INITDB_ROOT_PASSWORD=${{ secrets.MONGO_INITDB_ROOT_PASSWORD }} >> .env
          echo MONGO_INITDB_ROOT_USERNAME=${{ secrets.MONGO_INITDB_ROOT_USERNAME }} >> .env
          echo MONGO_PORT=${{ secrets.MONGO_PORT }} >> .env
          echo TZ=${{ secrets.TZ }} >> .env
          echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
          echo NODE_ENV=${{ secrets.NODE_ENV }} >> .env
          echo MONGO_SERVICE=${{ secrets.MONGO_SERVICE }} >> .env
          echo AUTH_SOURCE=${{ secrets.AUTH_SOURCE }} >> .env
          echo CC_TEST_REPORTER_ID=${{ secrets.CC_TEST_REPORTER_ID }} >> .env

      - name: Build docker-compose
        run: docker-compose -f docker-compose.yml up --build -d
      
      # - name: publish coverage
      #   uses: paambaati/codeclimate-action@v2.5.7
      #   env:
      #     CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
      #   with:
      #     coverageCommand: docker-compose exec boillerplate npm run coverage-report
      #     debug: true
    # - name: Running test inside container docker
    #   run: docker exec -t boillerplate npm run test

  coverage:
    needs: [ run-docker-compose ]
    name: coverage
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - uses: actions/setup-node@master
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm install -g yarn
    - run: yarn install
    - run: yarn add --dev jest
    - name: Create env file
      run: |
          touch .env
          echo CC_TEST_REPORTER_ID=${{ secrets.CC_TEST_REPORTER_ID }} >> .env
          
    - uses: paambaati/codeclimate-action@v2.2.4
      env:
        CC_TEST_REPORTER_ID: ${{ CC_TEST_REPORTER_ID }}
      with:
        coverageCommand: yarn test:cov
        
  # coverage:
  #   needs: [ codecov ]
  #   name: coverage
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v2
  #   - uses: actions/setup-node@v1
  #     with:
  #       node-version: '14.x'
  #   - run: npm install
  #   - uses: paambaati/codeclimate-action@v2.2.4
  #     env:
  #       CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
  #     with:
  #       coverageCommand: npm run coverage-report
